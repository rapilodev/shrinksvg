#!/usr/bin/env perl
use strict;
use warnings;
use XML::LibXML;

my $input_svg = do {local $/; <STDIN>};
my $parser = XML::LibXML->new();
my $doc = $parser->parse_string($input_svg);
my $root = $doc->documentElement();
my ($width, $height) = (split(/\s+/, $root->getAttribute('viewBox')))[2, 3];
my $precision =
    $width > 1000 || $height > 1000 ? 0
  : $width > 100 || $height > 100 ? 1
  : $width > 10 || $height > 10 ? 2
  : 3;

sub round {
    my ($float) = @_;
    my $res;
    if ($float =~ /^(-?\d+)$/ or $precision == 0) {
        $res = int($float + $float / abs($float * 2 || 1));
    } else {
        $res = $float =~ s/^(-?\d+\.\d{$precision}).*/$1/r;
    }
    $res = 0 if $res == 0;
    return "$res";
}

sub reduce_precision {
    my ($data) = @_;
    $data =~ s/(-?\d+\.\d*)/round($1)/ge;
    return $data;
}

sub convert_polygon_to_path {
    my ($points) = @_;
    my @coords = split(/[\s,]+/, $points);
    return '' unless @coords;
    my $d = "M$coords[0],$coords[1]";
    for (my $i = 2; $i < @coords; $i += 2) {
        $d .= " L$coords[$i],$coords[$i+1]";
    }
    $d .= "Z";
    return $d;
}

sub simplify_path_data {
    my ($d) = @_;
    my @commands = split(/(?=[MLHVZmlhvzC])/, $d);    #cSsQqTtAa
    my $result = '';
    my ($last_x, $last_y) = (0, 0);
    for my $cmd (@commands) {
        if ($cmd =~ /^M(-?\d+\.?\d*),(-?\d+\.?\d*)/) {
            ($last_x, $last_y) = ($1, $2);
            $result .= "M$last_x,$last_y";
        } elsif ($cmd =~ /^L(-?\d+\.?\d*),(-?\d+\.?\d*)/) {
            my ($x, $y) = ($1, $2);
            if ($x == $last_x && $y == $last_y) {
            } elsif ($x == $last_x) {
                $result .= "V$y";
            } elsif ($y == $last_y) {
                $result .= "H$x";
            } else {
                $result .= "L$x,$y";
            }
            ($last_x, $last_y) = ($x, $y);
        } elsif ($cmd =~ /^H(-?\d+\.?\d*)/) {
            my $x = $1;
            $result .= "H$x";
            $last_x = $x;
        } elsif ($cmd =~ /^V(-?\d+\.?\d*)/) {
            my $y = $1;
            $result .= "V$y";
            $last_y = $y;
        } elsif ($cmd =~ /^Z/) {
            $result .= "Z";
        } else {
            $result .= $cmd;
        }
    }
    return $result;
}

sub optimize_d {
    my ($d_attr) = shift;
    my $d = reduce_precision($d_attr);
    while (1) {
        my $new = simplify_path_data($d);
        if (length($new) < length($d)) {
            $d = $new;
        } else {
            last;
        }
    }
    return $d;

}

for my $polygon ($root->findnodes('//*[name()="polygon"]')) {
    my $points = $polygon->getAttribute('points');
    my $path_data = convert_polygon_to_path($points);
    my $path = $doc->createElement('path');
    $path->setAttribute('d', $path_data);
    for my $attr ($polygon->attributes) {
        next if $attr->name eq 'points';
        $path->setAttribute($attr->name, $attr->value);
    }
    $polygon->replaceNode($path);
}

for my $path ($root->findnodes('//*[@d]')) {
    $path->setAttribute('d', optimize_d($path->getAttribute('d')));
}

for my $element ($root->findnodes('//*[@points]')) {
    $element->setAttribute('d', optimize_d($element->getAttribute('points')));
}

my $s = $doc->toString();
$s =~ s/\t+/ /g;
$s =~ s/\n+/\n/g;
$s =~ s/\n<\//<\//g;
## $s =~ s/\n+/ /g;
$s =~ s/ +/ /g;
print $s ;

